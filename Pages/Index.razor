@page "/store"
@attribute [Authorize(Roles = "user")]

@using BlazorApp.Models;
@using BlazorApp.Repositories;
@using BlazorApp.Utilities;
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client;
@using BlazorApp.Areas.Identity.Data;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;



@inject ILogger<Index> Logger
@inject IFileUploadService fileService
@inject IImageUploadRepository imageUploadRepo
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> _UserManager

<AuthorizeView>
    <Authorized Context="authContext">
        
    <EditForm Model="@imageModel" OnValidSubmit="@HandleFormSubmit">
        <p class="mt-3"style="font-weight: bold;">Select Files for upload: </p>
        <label for="fileInput" class="custom-file-label">Choose Files</label>
        <InputFile id="fileInput" class="input-file" OnChange="@SelectFiles" multiple />
        <br />
        <p class="mt-4"style="font-weight: bold;">Select people you want to see uploaded image: </p>
        
        <Dropdown class="custom-file-label"style="border-radius: 100px;">
                <DropdownToggle style="font-weight: bold; color: black; ">
                    Select
                </DropdownToggle>
                <DropdownMenu style="text-align: center; background: lightblue; border-radius: 13px; border: solid rgba(0,0,0,0.8);">
                    <DropdownItem class="dp-item_" @onclick="() => resetSelectedUsers()" style="color:red; font-weight: bold;">Reset selection!</DropdownItem>
                    <DropdownDivider></DropdownDivider>
                    <DropdownItem class="dp-item" @onclick="() => selectAllUsers()" style="color:green; font-weight: bold;">Select all!</DropdownItem>
                    @foreach(var user in dropDownUsers)
                    {
                        <DropdownDivider></DropdownDivider>
                        <DropdownItem class="dp-item" @onclick="() => selectUsers(user)" style="font-weight: bold;">@user.UserName</DropdownItem>
                    }
                </DropdownMenu>
        </Dropdown>
        <br>
        <button class="mt-4 mx-2 mb-3 custom-file-label" type="submit">Upload</button>
        @if(selectedUsers.Count != 0)
        {
            <p style="font-weight: bold;">Currently selected :</p>
        <p>
            @foreach(var user in selectedUsers)
            {
                <span style="font-style: italic;">@user.UserName</span>
                @if(user != selectedUsers.Last()) { <span>, </span> } 
            }
    </p>
        } 
    </EditForm>

    @if (loading)
    {
        <span>Uploading...</span>
    }

    <ul style="list-style-type:none; color: blue;">
        @foreach (var message in messages)
        {
            <li>
                @message
            </li>
        }
    </ul>


    @if(images.Count>0)
    {
    <hr class="mb-4 mt-3" style="color: blue; height: 1.75px;">
    <h2 class="mb-4" style="font-weight: bold;">Uploaded Images</h2>
     <div style="display:flex; gap: 20px; flex-wrap:wrap; @(images.Count > 4 ? "justify-content: space-evenly" : "")">
        @foreach (var image in images)
        {
                <div style="text-align: center;">
                        <img src="/Uploads/@image.ImageName" alt="image" style="object-fit: contain; width: 250px; height: 200px; cursor: pointer;" @onclick="() => OpenModal(image.ImageName, image.Id, true)" />
                        <p style="color: rgba(0,0,0,0.9);">@image.DateUploaded.ToString("dd-MM-yyyy HH:mm:ss")</p>
                </div>
        }
    </div>
    }

    @if(othersImages.Count>0)
    {
    <hr class="mb-4 mt-5" style="color: blue; height: 1.75px;">
    <h2 class="mb-4" style="font-weight: bold;">Others Uploaded Images</h2>
    <div style="display:flex; gap: 20px; flex-wrap:wrap; @(othersImages.Count > 4 ? "justify-content: space-evenly" : "")">
        @foreach (var image in othersImages)
        {
                <div style="text-align: center;">
                        <img src="/Uploads/@image.ImageName" alt="image" style="object-fit: contain; width: 250px; height: 200px; cursor: pointer;" @onclick="() => OpenModal(image.ImageName, image.Id, false)" />
                        <p class="mb-1"style="color: rgb(5, 39, 103); font-weight:bold;">@image.UserName </p>
                        <p style="color: rgba(0,0,0,0.9);">@image.DateUploaded.ToString("dd-MM-yyyy HH:mm:ss")</p>
                </div>
        }
    </div>
    }


    </Authorized>
    
    <NotAuthorized>
        <p class="m-3" style="color: red; font-size:20px;">Please login or register if you don't have an account!</p>
    </NotAuthorized>
</AuthorizeView>

<style>
    
    .input-file {
    display: none;
}

.custom-file-label {
    display: inline-block;
    background-color: lightblue;
    border-radius: 20px;
    border: none;
    color: black;
    font-weight: bold;
    padding: 10px 10px;
    cursor: pointer;
    text-align: center;
}

    .dp-item_:hover
    {
        background:none;
        transition: ease 0.2s;
        scale: 1.2;
    }
    .dp-item:hover
    {
        background: none;
        color:white;
        transition: ease-in 0.15s;
        scale: 1.3;
        
    }
</style>

<ImageModal IsVisible="@isModalVisible" ImageUrl="@selectedImageUrl" ImageId="@selectedImageId"  CanDelete="@canDeleteImage" IsVisibleChanged="@(visible => isModalVisible = visible)" OnDelete="@(id => DeleteImage(id))" OnDeleteUrl="@(url => DeleteOthersImage(url))" />


@code {
    bool loading = false;
    List<string> messages = new();
    List<IBrowserFile> files = new();
    int maxFileSize = 1 * 1024 * 1024;
    
    ImageFile imageModel = new();

    List<ImageFile> images = new();

    List<ImageFile> othersImages = new List<ImageFile>();

    List<ApplicationUser> dropDownUsers = new();

    List<ApplicationUser> selectedUsers = new();

    private bool isModalVisible = false;

    private bool canDeleteImage;
    private string selectedImageUrl;
    private int selectedImageId;
    private HubConnection hubConnection;


    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder() 
            .WithUrl(Navigation.ToAbsoluteUri("/imagehub")) 
            .Build(); 

        hubConnection.On<string>("ReceiveImageUpdate", (imageId) => 
        {
            LoadImages(); 
        }); 

        hubConnection.On<int>("ReceiveImageDelete", (imageId) => 
        {
            images.RemoveAll(image => image.Id == imageId);
            StateHasChanged(); 
        }); 

        hubConnection.On<string>("ReceiveOthersImageDelete", (imageName) =>
        {
                othersImages.RemoveAll(image => image.ImageName == imageName);
                StateHasChanged();
        });

        await hubConnection.StartAsync(); 


        messages.Clear();
        loading = true;
        await LoadUsers();
        await LoadImages();
        resetSelectedUsers();
        loading = false;
    }
    private async void SelectFiles(InputFileChangeEventArgs e)
    {
        files = e.GetMultipleFiles(maxFileSize).ToList();
    }

   private void selectUsers(ApplicationUser user)
    {
        if (!selectedUsers.Contains(user))
        {
            selectedUsers.Add(user);
        }
    }

    void selectAllUsers()
    {
        foreach(var user in dropDownUsers)
        {
            selectedUsers.Add(user);
        }
    }

    void resetSelectedUsers()
    {
        if (selectedUsers.Count != 0)
        {
            selectedUsers.Clear();
        }
    }

    private async Task HandleFormSubmit()
    {
        loading = true;
        messages.Clear();
        var allowedExtenstions = new string[] { ".png", ".jpg", ".jpeg", ".gif" };
        int count = 0;
        foreach (var file in files)
        {
            try
            {
                (int statusCode, string statusMessage) = await fileService.UploadFileAsync(file, maxFileSize, allowedExtenstions);
                if (statusCode == 1)
                {
                    messages.Add($"File : {file.Name} uploaded");
                    var imageData = new ImageFile
                        {
                            ImageName = statusMessage,
                            DateUploaded = DateTime.Now
                        };
                    
                    var userId = await GetUserId();
                    await hubConnection.SendAsync("UploadImageToDb", imageData, userId);

                    if(selectedUsers.Count > 0)
                    {
                        foreach(var user in selectedUsers)
                        {
                            await hubConnection.SendAsync("UploadImageToOthersUsers", imageData, user.Id);
                        }
                    }
                    count++;
                }
                else
                    messages.Add(statusMessage);

            }
            catch (Exception ex)
            {
                messages.Add($"File : {file.Name} Error : {ex.Message}");
                Logger.LogError(ex.Message);
            }
        }
        resetSelectedUsers();
        loading = false;
        messages.Add($"{count}/{files.Count} uploaded");
    }

    
     private async Task LoadImages()
    {
        try
        {
            var userId = await GetUserId();
            images = (await imageUploadRepo.GetImages(userId)).ToList();
            othersImages = (await imageUploadRepo.GetImagesFromOtherUsers(userId)).ToList();

            foreach(var image in othersImages)
            {
                GetUsername(image);
            }
        }
        catch(Exception ex)
        {
           messages.Add($"Could not load images. Error: {ex.Message}");
            Logger.LogError(ex, "Error loading images");
        }
        messages.Clear();
        StateHasChanged();
    }

    private async Task LoadUsers()
    {
        try
        {
            var currentUserId = await GetUserId();
            var allUsers = await _UserManager.Users.ToListAsync();
            dropDownUsers = allUsers.Where(user => user.Id != currentUserId).ToList();
        }
        catch (Exception ex)
        {
            messages.Add($"Could not load users. Error: {ex.Message}");
            Logger.LogError(ex, "Error loading users");
        }
    }

    private async Task<string> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    }

    private async void GetUsername(ImageFile image)
    {
        image.UserName = await imageUploadRepo.GetUsername(image);
        StateHasChanged();
    }
     private void OpenModal(string imageUrl, int imageId, bool canDelete)
    {
        selectedImageUrl = imageUrl;
        selectedImageId = imageId;
        canDeleteImage = canDelete;
        isModalVisible = true;
    }

     private async Task DeleteImage(int imageId)
    {
        var userId = await GetUserId();
        await hubConnection.SendAsync("DeleteImageFromDb", imageId, userId);
        isModalVisible = false;
    }

    private async Task DeleteOthersImage(string imageName)
    {
         await hubConnection.SendAsync("DeleteImageFromOtherUsers", imageName);
    }

}